// <auto-generated />
using System;
using ExerciseApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExerciseApi.Migrations
{
    [DbContext(typeof(ExerciseApiDbContext))]
    [Migration("20221229121524_AddNameFieldToWorkoutDay")]
    partial class AddNameFieldToWorkoutDay
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExerciseApi.Models.ExerciseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkoutDayId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutDayId");

                    b.ToTable("ExerciseComponent");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ExerciseApi.Models.ExerciseComponents.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExerciseStepId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ExerciseStepId");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("ExerciseApi.Models.ExerciseComponents.ExerciseRep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BreakId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BreakId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("exerciserep", (string)null);
                });

            modelBuilder.Entity("ExerciseApi.Models.ExerciseComponents.ExerciseStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ExerciseRepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseRepId");

                    b.ToTable("exercisestep", (string)null);
                });

            modelBuilder.Entity("ExerciseApi.Models.WorkoutDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("workoutday", (string)null);
                });

            modelBuilder.Entity("ExerciseApi.Models.Break", b =>
                {
                    b.HasBaseType("ExerciseApi.Models.ExerciseComponent");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("break", (string)null);
                });

            modelBuilder.Entity("ExerciseApi.Models.Exercise", b =>
                {
                    b.HasBaseType("ExerciseApi.Models.ExerciseComponent");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("exercise", (string)null);
                });

            modelBuilder.Entity("ExerciseApi.Models.ExerciseComponent", b =>
                {
                    b.HasOne("ExerciseApi.Models.WorkoutDay", null)
                        .WithMany("WorkoutPlan")
                        .HasForeignKey("WorkoutDayId");
                });

            modelBuilder.Entity("ExerciseApi.Models.ExerciseComponents.Equipment", b =>
                {
                    b.HasOne("ExerciseApi.Models.Exercise", null)
                        .WithMany("Equipments")
                        .HasForeignKey("ExerciseId");

                    b.HasOne("ExerciseApi.Models.ExerciseComponents.ExerciseStep", null)
                        .WithMany("Equipments")
                        .HasForeignKey("ExerciseStepId");
                });

            modelBuilder.Entity("ExerciseApi.Models.ExerciseComponents.ExerciseRep", b =>
                {
                    b.HasOne("ExerciseApi.Models.Break", null)
                        .WithMany("BreakSequence")
                        .HasForeignKey("BreakId");

                    b.HasOne("ExerciseApi.Models.Exercise", null)
                        .WithMany("ExerciseSet")
                        .HasForeignKey("ExerciseId");
                });

            modelBuilder.Entity("ExerciseApi.Models.ExerciseComponents.ExerciseStep", b =>
                {
                    b.HasOne("ExerciseApi.Models.ExerciseComponents.ExerciseRep", null)
                        .WithMany("Steps")
                        .HasForeignKey("ExerciseRepId");
                });

            modelBuilder.Entity("ExerciseApi.Models.Break", b =>
                {
                    b.HasOne("ExerciseApi.Models.ExerciseComponent", null)
                        .WithOne()
                        .HasForeignKey("ExerciseApi.Models.Break", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseApi.Models.Exercise", b =>
                {
                    b.HasOne("ExerciseApi.Models.ExerciseComponent", null)
                        .WithOne()
                        .HasForeignKey("ExerciseApi.Models.Exercise", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseApi.Models.ExerciseComponents.ExerciseRep", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("ExerciseApi.Models.ExerciseComponents.ExerciseStep", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("ExerciseApi.Models.WorkoutDay", b =>
                {
                    b.Navigation("WorkoutPlan");
                });

            modelBuilder.Entity("ExerciseApi.Models.Break", b =>
                {
                    b.Navigation("BreakSequence");
                });

            modelBuilder.Entity("ExerciseApi.Models.Exercise", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("ExerciseSet");
                });
#pragma warning restore 612, 618
        }
    }
}
